import tasks.CheckReadmeTask

buildscript {
    repositories {
        maven { url 'https://maven.pkg.jetbrains.space/kotlin/p/kotlinx/maven' }
        gradlePluginPortal()

        KotlinCommunity.addDevRepositoryIfEnabled(delegate, project)
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "kotlinx.team:kotlinx.team.infra:$infra_version"
    }
}

plugins {
    id("base")
    id("org.jetbrains.kotlinx.binary-compatibility-validator") version "0.15.0-Beta.1"
}

apply plugin: 'kotlinx.team.infra'

infra {
    teamcity {
        libraryStagingRepoDescription = project.name
    }

    publishing {
        include(":kotlinx-benchmark-runtime")

        libraryRepoUrl = "https://github.com/Kotlin/kotlinx-benchmark"

        if (project.findProperty("publication_repository") == "sonatype") {
            sonatype {}
        }
    }
}

// https://youtrack.jetbrains.com/issue/KT-48410
repositories {
    mavenCentral()
}

// region Workarounds for https://github.com/gradle/gradle/issues/22335
tasks.register("apiDump") {
    it.dependsOn(gradle.includedBuild("plugin").task(":apiDump"))
}

afterEvaluate {
    gradle.includedBuilds.forEach { included ->
        project(":kotlinx-benchmark-runtime").tasks.named("publishToMavenLocal") { dependsOn(included.task(":publishToMavenLocal")) }
    }
}
//endregion

allprojects {
    logger.info("Using Kotlin $kotlin_version for project $it")
    repositories {
        KotlinCommunity.addDevRepositoryIfEnabled(delegate, project)
    }
}

apiValidation {
    ignoredProjects += [
            "examples",
            "java",
            "kotlin",
            "kotlin-kts",
            "kotlin-multiplatform",
            "integration",
    ]

    klib {
        it.enabled = true
    }
}

tasks.register("checkReadme", CheckReadmeTask) {
    minSupportedGradleVersion = libs.versions.minSupportedGradle
    readme = file("README.md")
}

tasks.check {
    dependsOn(tasks.named("checkReadme"))
}
