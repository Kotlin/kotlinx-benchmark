plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.allopen' version "1.9.21"
    id 'org.jetbrains.kotlinx.benchmark'
}


// how to apply plugin to a specific source set?
allOpen {
    annotation("org.openjdk.jmh.annotations.State")
}

// Create a custom sourceSet
sourceSets {
    benchmarks
}

sourceSets.configureEach {
    kotlin.srcDirs = ["$it.name/src"]
    java.srcDirs = ["$it.name/src"]
    resources.srcDirs = ["$it.name/resources"]
}

kotlin {
    compilerOptions {
        languageVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.@Companion.fromVersion(project.ext.kotlin_language_version))
        apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.@Companion.fromVersion(project.ext.kotlin_language_version))
    }
}

compileJava {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


// Propagate dependencies from main sourceSet
// You can add "+ sourceSets.test.output" to include test output as well
dependencies {
    implementation(project(":kotlinx-benchmark-runtime"))
    benchmarksImplementation sourceSets.main.output + sourceSets.main.runtimeClasspath
}

// Configure benchmark
benchmark {
    // Setup configurations
    targets {
        // This one matches sourceSet name above
        register("benchmarks") {
            jmhVersion = "1.21"
        }
    }
}
