import org.jetbrains.kotlin.gradle.dsl.KotlinVersion
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask

buildscript {
    ext.kotlinDevUrl = rootProject.properties["kotlin_repo_url"]
    repositories {
        maven { url 'https://maven.pkg.jetbrains.space/kotlin/p/kotlinx/maven' }
        mavenCentral()
        maven { url 'https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev' }
        mavenLocal()
        if (kotlinDevUrl != null) {
            maven { url = kotlinDevUrl }
        }
    }
    dependencies {
        classpath "kotlinx.team:kotlinx.team.infra:$infra_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.21.0'
    id("org.jetbrains.kotlinx.binary-compatibility-validator") version "0.15.0-Beta.2"
}

apply(plugin: 'org.jetbrains.kotlin.jvm')
apply(plugin: 'kotlinx.team.infra')

infra {
    teamcity {
        libraryStagingRepoDescription = project.name
    }
    publishing {
        include(":")

        libraryRepoUrl = "https://github.com/Kotlin/kotlinx-benchmark"
    }
}

logger.info("Using Kotlin $kotlin_version for project ${project.name}")

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven { url 'https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev' }
    mavenLocal()

    if (kotlinDevUrl != null) {
        maven { url = kotlinDevUrl }
    }
}

pluginBundle {
    website = 'https://github.com/Kotlin/kotlinx-benchmark'
    vcsUrl = 'https://github.com/Kotlin/kotlinx-benchmark.git'
    tags = ['benchmarking', 'multiplatform', 'kotlin']
}

gradlePlugin {
    plugins {
        benchmarkPlugin {
            id = "org.jetbrains.kotlinx.benchmark"
            implementationClass = "kotlinx.benchmark.gradle.BenchmarksPlugin"
            displayName = "Gradle plugin for benchmarking"
            description = "Toolkit for running benchmarks for multiplatform Kotlin code."
        }
    }
}

sourceSets {
    main {
        kotlin.srcDirs = ['main/src']
        java.srcDirs = ['main/src']
        resources.srcDirs = ['main/resources']
    }
    test {
        kotlin.srcDirs = ['test/src']
        java.srcDirs = ['test/src']
        resources.srcDirs = ['test/resources']
    }
}

kotlin {
    compilerOptions {
        languageVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.@Companion.fromVersion(project.ext.kotlin_language_version))
        apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.@Companion.fromVersion(project.ext.kotlin_api_version))
    }
}

tasks.named("compileKotlin", KotlinCompilationTask.class) {
    compilerOptions {
        optIn.addAll(
                "kotlinx.benchmark.gradle.internal.KotlinxBenchmarkPluginInternalApi",
                "kotlin.RequiresOptIn",
        )
        //noinspection GrDeprecatedAPIUsage
        apiVersion = KotlinVersion.KOTLIN_1_4 // the version of Kotlin embedded in Gradle
    }
}

dependencies {
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version

    implementation 'com.squareup:kotlinpoet:1.3.0'

    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-util-klib-metadata', version: kotlin_version
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-util-klib', version: kotlin_version
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-util-io', version: kotlin_version

    compileOnly group: 'org.jetbrains.kotlin.multiplatform', name: 'org.jetbrains.kotlin.multiplatform.gradle.plugin', version: kotlin_version
    compileOnly "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlin_version"
    compileOnly "org.openjdk.jmh:jmh-generator-bytecode:$jmhVersion" // used in worker
}

def generatePluginConstants = tasks.register("generatePluginConstants") {
    description = "Generates constants file used by BenchmarksPlugin"

    File outputDir = temporaryDir
    outputs.dir(outputDir).withPropertyName("outputDir")

    File constantsKtFile = new File(outputDir, "BenchmarksPluginConstants.kt")

    Provider<String> benchmarkPluginVersion = project.providers.gradleProperty("releaseVersion")
            .orElse(project.version.toString())
    inputs.property("benchmarkPluginVersion", benchmarkPluginVersion)

    Provider<String> minSupportedGradleVersion = libs.versions.minSupportedGradle
    inputs.property("minSupportedGradleVersion", minSupportedGradleVersion)

    doLast {
        constantsKtFile.write(
                """|package kotlinx.benchmark.gradle.internal
                |
                |internal object BenchmarksPluginConstants {
                |  const val BENCHMARK_PLUGIN_VERSION = "${benchmarkPluginVersion.get()}"
                |  const val MIN_SUPPORTED_GRADLE_VERSION = "${minSupportedGradleVersion.get()}"
                |}
                |""".stripMargin()
        )
    }
}

sourceSets {
    main {
        kotlin.srcDir(generatePluginConstants)
    }
}

if (project.findProperty("publication_repository") == "space") {
    // publish to Space repository
    publishing {
        repositories {
            maven {
                name = "space"
                url = "https://maven.pkg.jetbrains.space/kotlin/p/kotlinx/dev"
                credentials {
                    username = project.findProperty("space.user")
                    password = project.findProperty("space.token")
                }
            }
        }
    }
}

apiValidation {
    nonPublicMarkers += ["kotlinx.benchmark.gradle.internal.KotlinxBenchmarkPluginInternalApi"]
}
