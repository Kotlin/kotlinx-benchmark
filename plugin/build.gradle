buildscript {
    ext.kotlinDevUrl = rootProject.properties["kotlin_repo_url"]
    repositories {
        maven { url 'https://maven.pkg.jetbrains.space/kotlin/p/kotlinx/maven' }
        mavenCentral()
        if (kotlinDevUrl != null) {
            maven { url = kotlinDevUrl }
        }
    }
    dependencies {
        classpath "kotlinx.team:kotlinx.team.infra:$infra_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }

}

plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.21.0'
}

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'kotlinx.team.infra'

infra {
    teamcity {
        libraryStagingRepoDescription = project.name
    }
    publishing {
        include(":")

        libraryRepoUrl = "https://github.com/Kotlin/kotlinx-benchmark"
    }
}

logger.info("Using Kotlin $kotlin_version for project ${project.name}")

repositories {
    mavenCentral()
    gradlePluginPortal()

    if (kotlinDevUrl != null) {
        maven { url = kotlinDevUrl }
    }
}

pluginBundle {
    website = 'https://github.com/Kotlin/kotlinx-benchmark'
    vcsUrl = 'https://github.com/Kotlin/kotlinx-benchmark.git'
    tags = ['benchmarking', 'multiplatform', 'kotlin']
}

gradlePlugin {
    plugins {
        benchmarkPlugin {
            id = "org.jetbrains.kotlinx.benchmark"
            implementationClass = "kotlinx.benchmark.gradle.BenchmarksPlugin"
            displayName = "Gradle plugin for benchmarking"
            description = "Toolkit for running benchmarks for multiplatform Kotlin code."
        }
    }
}

sourceSets {
    main {
        kotlin.srcDirs = ['main/src']
        java.srcDirs = ['main/src']
        resources.srcDirs = ['main/resources']
    }
    test {
        kotlin.srcDirs = ['test/src']
        java.srcDirs = ['test/src']
        resources.srcDirs = ['test/resources']
    }
    configureEach {
        languageSettings.languageVersion = rootProject.properties["kotlin_language_version"]
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        apiVersion = "1.4" // the version of Kotlin embedded in Gradle
    }
}

dependencies {
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version

    implementation 'com.squareup:kotlinpoet:1.3.0'

    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-util-klib-metadata', version: kotlin_version
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-util-klib', version: kotlin_version
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-util-io', version: kotlin_version
    
    compileOnly group: 'org.jetbrains.kotlin.multiplatform', name: 'org.jetbrains.kotlin.multiplatform.gradle.plugin', version: kotlin_version
    compileOnly "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlin_version"
    compileOnly "org.openjdk.jmh:jmh-generator-bytecode:$jmhVersion" // used in worker
}

tasks.register("overridePluginVersion") {
    description = "Overrides BenchmarksPlugin.PLUGIN_VERSION during release builds"
    onlyIf {
        project.findProperty("releaseVersion") != null
    }
    doLast {
        def benchmarksPluginFile = "${projectDir}/main/src/kotlinx/benchmark/gradle/BenchmarksPlugin.kt"
        def releaseVersion = project.findProperty("releaseVersion")
        ant.replaceregexp(
                file: benchmarksPluginFile,
                match: "const val PLUGIN_VERSION = \"[\\d.]+-SNAPSHOT\"",
                replace: "const val PLUGIN_VERSION = \"$releaseVersion\"",
                encoding: "UTF-8"
        )
    }
}

tasks.compileKotlin.dependsOn overridePluginVersion

if (project.findProperty("publication_repository") == "space") {
    // publish to Space repository
    publishing {
        repositories {
            maven {
                name = "space"
                url = "https://maven.pkg.jetbrains.space/kotlin/p/kotlinx/dev"
                credentials {
                    username = project.findProperty("space.user")
                    password = project.findProperty("space.token")
                }
            }
        }
    }
}
